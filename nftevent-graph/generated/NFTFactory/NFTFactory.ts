// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ERC721CollectionCreated extends ethereum.Event {
  get params(): ERC721CollectionCreated__Params {
    return new ERC721CollectionCreated__Params(this);
  }
}

export class ERC721CollectionCreated__Params {
  _event: ERC721CollectionCreated;

  constructor(event: ERC721CollectionCreated) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get initialOwner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NFTFactory extends ethereum.SmartContract {
  static bind(address: Address): NFTFactory {
    return new NFTFactory("NFTFactory", address);
  }

  erc721Implementation(): Address {
    let result = super.call(
      "erc721Implementation",
      "erc721Implementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_erc721Implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc721Implementation",
      "erc721Implementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc721Implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateERC721CollectionCall extends ethereum.Call {
  get inputs(): CreateERC721CollectionCall__Inputs {
    return new CreateERC721CollectionCall__Inputs(this);
  }

  get outputs(): CreateERC721CollectionCall__Outputs {
    return new CreateERC721CollectionCall__Outputs(this);
  }
}

export class CreateERC721CollectionCall__Inputs {
  _call: CreateERC721CollectionCall;

  constructor(call: CreateERC721CollectionCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get initialOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateERC721CollectionCall__Outputs {
  _call: CreateERC721CollectionCall;

  constructor(call: CreateERC721CollectionCall) {
    this._call = call;
  }
}
